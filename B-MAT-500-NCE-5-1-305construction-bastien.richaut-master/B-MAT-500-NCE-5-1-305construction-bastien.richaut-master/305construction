#!/usr/bin/env python3

import sys
import os

AYAYA = "AYAYA"

# il faut get le between 
# On le récupère avec temps des trucs qui dépendent de lui - temps du truc à faire
# Donc on récupère dans un 1er temps ce qui a besoin de cette dépendance pour chaque task
# Puis on fait un getTime inversé et si Temps le plus bas == temps actuel alors pas 
# Changer sinon between

# Pour get le temps de la construction
# On calcule le temps de fin de chaque tache et on regarde lequel finit le plus tard

# -h
def usage():
    print("USAGE")
    print("\t./305construction file")
    print("DESCRIPTION")
    print("\tfile\tfile describing the tasks")
    sys.exit(0)

# Main Function
def construction(tab):
    # print(tab)
    atm = []
    fin = []
    for element in tab:
        arr = []
        for i in range(3, len(element)):
            arr.append(element[i])
        atm.append([element[0], element[2], arr])
    while len(atm) != 0:
        tt = ready(atm, fin)
        for element in tt:
            atm.remove(element)
            fin.append(element)
    fin = getTime(fin)
    zz = getFinals(fin)
    #fin = getDep(fin)
    #for element in fin:
    #    print (element)
    #print (zz)

    # Prints
    print ("Total duration of construction:", zz, "weeks\n")
    for element in fin:
        print (element[0], "must begin at t=", end='')
        print (element[3])
    print ("\n")
    for element in fin:
        print (element[0], end='\t')
        print ("(0)", end='\t')
        for i in range(element[3]):
            print (' ', end='')
        for i in range(int(element[1])):
            print ('=', end='')
        for i in range(zz - int(element[1]) - element[3]):
            print (' ', end='')
        print ()

# Function to check which element can now be done
def ready(tbd, done):
    fin = []
    for element in tbd:
        isok = 0
        for task in element[2]:
            for td in done:
                if task in td:
                    isok = isok + 1
        if (isok == len(element[2])):
            fin.append(element)
    return fin

# Get Time for all elements
def getTime(tab):
    times = []
    for element in tab:
        if (element[2] == []):
            element.append(0)
        elif len(element[2]) == 1:
            for task in element[2]:
                for new in tab:
                    if (task == new[0]):
                        element.append(new[3] + int(new[1]))
        else:
            for task in element[2]:
                for new in tab:
                    if (task == new[0]):
                        times.append(new[3] + int(new[1]))
            element.append(max(times))
    return tab

# Get what depends of it
def getDep(tab):
    for ee in tab:
        arr = []
        for element in tab:
            for task in element[2]:
                if (ee[0] == task):
                    arr.append(element[0])
        ee.append(arr)
    return tab

# Get Final Times
def getFinals(tab):
    arr = []
    for element in tab:
        arr.append(int(element[1]) + element[3])
    return max(arr)

# GetTime inversé
def getTimeInv(tab):
    print()

# Checks for errors
def checks(tab):
    tt = 0
    for element in tab:
        for i in range (3, len(element)):
            tt = 0
            for j in range(len(tab)):    
                if (element[i] == tab[j][0]):
                    tt = 1
        if (tt == 0):
            print ("A mandatory task don't exist")
            sys.exit(84)
        try:
            int(element[2])
        except ValueError:
            print ("3rd arg in each line must be an int")
            sys.exit(84)

# Main
if __name__ == '__main__':
    av = sys.argv
    ac = len(av)

    if ac == 2 and av[1] == "-h":
        usage()
    if ac == 1:
        print ("No Arguments")
        sys.exit(84)
    if ac > 2:
        print ("Too Many Arguments")
        sys.exit(84)

    if os.path.isfile(av[1]) == 0:
        print ("File does not exist")
        sys.exit(84)
    if (os.stat(av[1]).st_size) == 0:
        print ("File is empty")
        sys.exit(84)

    file = open(av[1], "rt")
    fileString = file.readlines()
    for i in range (len(fileString)):
        fileString[i] = fileString[i].replace("\n", '')
        fileString[i] = fileString[i].split(';');

    if (ac == 3):
        if (len(av[2]) == 1):
            sq = av[2]
        else:
            print ('c1 and c2 must be 1 character')
            sys.exit(84)
    if (ac == 4):
        if (len(av[2]) == 1):
            sq = av[2]
        else:
            print ('c1 and c2 must be 1 character')
            sys.exit(84)
        if (len(av[3]) == 1):
            wl = av[3]
        else:
            print ('c1 and c2 must be 1 character')
            sys.exit(84)

# A voir si l'id doit forcément être du format Aaa, le nom avec tout en minuscule
    checks(fileString)
    construction(fileString)