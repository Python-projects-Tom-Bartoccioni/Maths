#!/usr/bin/env python3

import sys
import os

# -h
def usage():
    print("USAGE")
    print("\t./303make makefile [file]")
    print("DESCRIPTION")
    print("\tmakefile\tname of the makefile")
    print("\tfile\tname of a recently modified file")
    sys.exit(0)

def get_odd_lines(tab):
    tmp = []
    for i in range (0, len(tab)):
        if (i % 2 == 0):
            tmp.append(tab[i])
    return tmp

# Make list of all files
# tab = lines without cc and options -c ou o
# tab2 = concatenate tab3
def make_files(tab):
    files = []
    tab2 = sum(tab, [])

    for element in tab2:
        try:
            files.index(element)
        except ValueError:
            files.append(element)

    files.sort()
    return files

def make_first_tab(tab, fin):
    mat = [[0] * len(tab) for i in range(len(tab))]
    for element in fin:
        for k in range (1, len(element)):
            mat[tab.index(element[k])][tab.index(element[0])] = 1

    return mat

def make_second_tab(tab, first):
    final = []
    for i in range (len(tab)):
        for j in range (len(tab)):
            if first[i][j] == 1:
                final.append([tab[i], " -> ", tab[j]])

    for i in range (len(tab)):
        for j in range (len(tab)):
            if final[j][0] == final[i][len(final[i]) - 1]:
                final[i].append(" -> ")
                final[i].append(final[j][len(final[j]) - 1])

    return final

# Main Function
def make(fileTab):
    fin = []
    for element in fileTab:
        fin.append(element.split())
    tab = make_files(get_odd_lines(fin))
    first = make_first_tab(tab, get_odd_lines(fin))
    second = make_second_tab(tab, first)

    # Prints
    for row in first:
        print ("[", end='')
        for col in range (len(row) - 1):
            print (row[col], end=' ')
        print (row[len(row) - 1], end='')
        print ("]")
    print ()
    for i in range (len(second) - 1):
        for element in second[i]:
            print (element, end='')
        print ()
    for element in second[len(second) - 1]:
        print (element, end='')

# If second argument
def makespe(fileTab, arg1):
    print (fileTab, arg1)

# Main
if __name__ == '__main__':
    av = sys.argv
    ac = len(av)

    if ac == 2 and av[1] == "-h":
        usage()
    if ac == 1:
        print ("No Arguments")
        sys.exit(84)
    if ac > 3:
        print ("Too Many Arguments")
        sys.exit(84)

    if os.path.isfile(av[1]) == 0:
        print ("File does not exist")
        sys.exit(84)
    if (os.stat(av[1]).st_size) == 0:
        print ("File is empty")
        sys.exit(84)

    file = open(av[1], "rt")
    fileString = file.readlines()
    fileTab = []
    for element in fileString:
        element = element.replace("\n", '')
        if len(element) != 0:
            fileTab.append(element.replace(':', ''))

    if (ac == 2):
        make(fileTab)
    if (ac == 3):
        makespe(fileTab, av[2])