#!/usr/bin/env python3

from io import StringIO
import math
import sys
import os
from typing import IO

# -h
def usage():
    print("USAGE")
    print("   ./302separation file [n | p1 p2]")
    print("DESCRIPTION")
    print("    file\tfile that contains the list of Facebook connections")
    print("    n\tmaximum length of the paths")
    print("    pi\tname of someone in the file")
    sys.exit(0)

# Make list of all people
def make_list(tab):
    list = []
    concat = []
    for element in tab:
        concat += element
    
    for element in concat:
        try:
            list.index(element)
        except ValueError:
            list.append(element)

    list.sort()
    return list

# Make first tab (who is friend with who)
def make_1st_tab(tab, list):
    result = [[0] * len(list) for i in range(len(list))]

    for element in tab:
        result[list.index(element[0])][list.index(element[1])] = 1
        result[list.index(element[1])][list.index(element[0])] = 1

    return result

def make_2nd_tab(list, second, nbx):
    cpy = [[999999999] * len(list) for i in range(len(list))]
    for x in range(0, len(list)):
        for y in range (0, len(list)):
            if (second[x][y] > 0):
                cpy[x][y] = 1
    for z in range(0, len(list)):
        for x in range(0, len(list)):
            for y in range(0, len(list)):
                cpy[x][y] = min(cpy[x][y], cpy[x][z] + cpy[z][y])
    for x in range(0, len(list)):
        for y in range(0, len(list)):
            if (cpy[x][y] > nbx - 1):
                cpy[x][y] = 0
            if (x == y):
                cpy[x][y] = 0
    return cpy

# Main Function
def separation(tab, nb):
    list = make_list(tab)
    first = make_1st_tab(tab, list)

# Prints
    for element in list:
        print(element)
    print()

    for line in first:
        for row in range (0, len(line)):
            if (row != len(line) - 1):
                print(line[row], end=' ')
            else:
                print(line[row], end='')
        print()
    print()
    
    second = make_2nd_tab(list, copy_tab(first, list), nb)

    for line in second:
        for row in range (0, len(line)):
            if (row != len(line) - 1):
                print(line[row], end=' ')
            else:
                print(line[row], end='')
        print()

def degree(fileTab, arg1, arg2):
    list = make_list(fileTab)
    try:
        a = list.index(arg1)
        b = list.index(arg2)
    except:
        print ("Degree of separation between", arg1, "and", arg2, end='')
        print (": -1")
        sys.exit(0)

    first = make_1st_tab(fileTab, list)
    second = make_2nd_tab(list, copy_tab(first, list), 99)

    if (a == b and arg1 != arg2):
        second[a][b] = -1

    print("Degree of separation between", arg1, "and", arg2, end='')
    print(":", second[a][b])

def copy_tab(tab, list):
    copy = [[0] * len(list) for i in range(len(list))]
    for line in range (len(tab)):
        for row in range (len(tab)):
            copy[line][row] = tab[line][row]
    return copy

# Main
if __name__ == '__main__':
    av = sys.argv
    ac = len(av)

    if ac == 2 and av[1] == "-h":
        usage()
    if (ac == 1):
        print("No arguments")
        sys.exit(84)
    if (ac == 2):
        print("Not enought arguments")
        sys.exit(84)
    if (ac > 4):
        print("Too many arguments")
        sys.exit(84)

    if (os.path.isfile(av[1]) == 0):
        print ("File Does not exist")
        sys.exit(84)
    if (os.stat(av[1]).st_size) == 0:
        print("File is empty")
        sys.exit(84)

    file = open(av[1], "rt")
    fileString = file.readlines()
    fileTab = []
    for element in fileString:
        element = element.replace("\n", '')
        fileTab.append(element.split(" is friends with "))

    for element in fileTab:
        if (len(element) != 2):
            print("File is not at the good format")
            sys.exit(84)

    if (ac == 3):
        try:
            nb = int (av[2])
        except ValueError:
            print("Second argument must be an INT")
            sys.exit(84)
        separation(fileTab, nb + 1)
    if (ac == 4):
        degree(fileTab, av[2], av[3])