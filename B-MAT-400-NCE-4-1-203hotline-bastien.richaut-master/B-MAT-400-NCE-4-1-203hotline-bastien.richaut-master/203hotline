#!/usr/bin/env python3

import math
import sys
import time

# -h
def usage():
    print("USAGE")
    print("   ./203hotline [n k | d]\n")
    print("DESCRIPTION")
    print("    n       n value for the computarion of C(n, k)")
    print("    k       k value for the computarion of C(n, k)")
    print("    d       average duration of calls (in seconds)")
    sys.exit(0)

# Nombre de combinaisons de n objets pris k
def combin(n, k):
    if k > n // 2:
        k = n - k
    x = 1
    y = 1
    i = n - k + 1
    while i <= n:
        x = (x * i) // y
        y += 1
        i += 1
    return x

# Probabilité d'avoir k réussite(s) dans n évènements indépendants, chaque évènement ayant une probabilité p% de réussite
def binom(k,n,p):
    x = combin(n, k) * math.pow(p, k) * math.pow(1 - p, n - k)
    return x

# If there is only one argument
def hotline_a(a):
    # p is equal to the call time divided by work time in seconds and n is the number of calls
    p = a / (60 * 60 * 8)
    n = 3500
    over = 0
    timea = time.time()

    print ("Binomial distrubution:")
    for r in range (0, 51):
        print (f"{r:.0f} -> ", end='')

        # Binomial formula
        res = math.factorial(n) / (math.factorial(n - r) * math.factorial(r)) * math.pow(p, r) * math.pow(1 - p, n - r)

        if (r + 1) % 5 == 0 or r == 50:
            print (f"{res:.3f}")
        else:
            print (f"{res:.3f}", end='\t')

        # Get overload %
        if r <= 25:
            over += res * 100

    print (f"Overload: {100 - over:.1f}%")
    timeb = time.time()
    print (f"Computation time: {(timeb - timea) * 100:.2f} ms")
    print ("")

    # lambda is equal to the call time divided by work time in seconds multiplied by the number of calls
    ll = n * p
    over = 0
    timea = time.time()

    print ("Poisson distribution:")
    for r in range (0, 51):
        print (f"{r:.0f} -> ", end='')

        # Poissons formula
        res = (math.pow(ll, r) * math.exp(- ll)) / math.factorial(r)

        if (r + 1) % 5 == 0 or r == 50:
            print (f"{res:.3f}")
        else:
            print (f"{res:.3f}", end='\t')

        # Get overload %
        if r <= 25:
            over += res * 100

    print (f"Overload: {100 - over:.1f}%")
    timeb = time.time()
    print (f"Computation time: {(timeb - timea) * 100:.2f} ms")

# If there is two arguments
def hotline_b(a, b):
    print (f"{b:.0f}-combinations of a set of size {a:.0f}:")
    print (combin(a, b))

# Main
if __name__ == '__main__':
    av = sys.argv
    ac = len(av)

    if ac == 2 and av[1] == "-h":
        usage()
    if (ac < 2):
        print("Not enough arguments")
        sys.exit(84)
    if (ac > 3):
        print("Too many arguments")
        sys.exit(84)

    if ac == 2:
        try:
            a = int(av[1])
        except ValueError:
            print("All numbers needs to be NUMBERS pls :)")
            sys.exit(84)
        if a <= 0:
            print("Give positive duration call please")
            sys.exit(84)
        hotline_a(a)

    if ac == 3:
        try:
            a = int(av[1])
            b = int(av[2])
        except ValueError:
            print("All numbers needs to be NUMBERS pls :)")
            sys.exit(84)
        if a <= 0 or b <= 0:
            print("Give positive duration call please")
            sys.exit(84)
        if a < b:
            print("'a' needs to be inferior to 'b'")
            sys.exit(84)
        hotline_b(a, b)