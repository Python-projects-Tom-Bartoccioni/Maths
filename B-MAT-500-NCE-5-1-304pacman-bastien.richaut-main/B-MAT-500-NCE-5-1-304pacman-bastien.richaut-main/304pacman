#!/usr/bin/env python3

import sys
import os

AYAYA = "AYAYA"

# -h
def usage():
    print("USAGE")
    print("\t./304pacman file c1 c2")
    print("DESCRIPTION")
    print("\tfile\tfile describing the board, using the following characters:")
    print("\t\t    '0' for an empty square,")
    print("\t\t    '1' for a wall,")
    print("\t\t    'F' for the ghost's position,")
    print("\t\t    'P' for Pacman's position.")
    print("\tc1\tcharacter to display for a wall")
    print("\tc2\tcharacter to display for an empty space.")
    sys.exit(0)

# Checks if no F or no P
def checks(fileString):
    ifp = False
    iff = False
    ln = len(fileString[0])
    for line in fileString:
        if (len(line) != ln):
            print ('All lines of the array must have same size')
            sys.exit(84)
        if (line.find('F') != -1):
            iff = True
        if (line.find('P') != -1):
            ifp = True
    
    if (iff == False or ifp == False):
        print ('There is no F or no P in this file')
        sys.exit(84)

# Check if there is another char
def ifAnother(fileString):
    tt = [];
    for line in fileString:
        tmp = line.replace('F', '')
        tmp = tmp.replace('P', '')
        tmp = tmp.replace('1', '')
        tmp = tmp.replace('0', '')
        tt.append(tmp)
    for line in tt:
        if (len(line) != 0):
            print ('Some characters are unknown')
            sys.exit(84)

# Find Ghost
def find_ghost(stringFile):
    for i in range(len(stringFile)):
        if (stringFile[i].find('F') != -1):
            return [i, stringFile[i].find('F')]

# PacMan
def pacman(fileString, c1, c2):
    ifAnother(fileString)
    for i in range (len(fileString)):
        fileString[i] = fileString[i].replace('1', c1)
    fileString = pathfinding(fileString, copytab(fileString))

    display(fileString, c1, c2)

    # final = []
    # for i in range (len(fileString)):
    #     final.append(convert(fileString[i]))
    #     final[i] = final[i].replace('0', c2)


    # for element in final:
    #     print (element)

# Pathfinding
def pathfinding(tab, cpy):
    arr = []
    arr2 = []
    arr.append(find_ghost(tab))
    while len(arr) > 0:
        arr2 = arr
        arr = []
        for element in arr2:
            if (cpy[element[0]][element[1]] == ('F' or 'P')):
                tt = '0'
            else:
                tt = cpy[element[0]][element[1]]

            if element[0] - 1 >= 0 and (cpy[element[0] - 1][element[1]] == '0' or cpy[element[0] - 1][element[1]] == 'P'):
                if cpy[element[0] - 1][element[1]] == 'P':
                    return cpy
                cpy[element[0] - 1][element[1]] = str(int(tt) + 1)
                arr.append([element[0] - 1, element[1]])
            if element[1] + 1 < len(tab[element[0]]) and (cpy[element[0]][element[1] + 1] == '0' or cpy[element[0]][element[1] + 1] == 'P'):
                if cpy[element[0]][element[1] + 1] == 'P':
                    return cpy
                cpy[element[0]][element[1] + 1] = str(int(tt) + 1)
                arr.append([element[0], element[1] + 1])
            if element[0] + 1 >= 0 and (cpy[element[0] + 1][element[1]] == '0' or cpy[element[0] + 1][element[1]] == 'P'):
                if cpy[element[0] + 1][element[1]] == 'P':
                    return cpy
                cpy[element[0] + 1][element[1]] = str(int(tt) + 1)
                arr.append([element[0] + 1, element[1]])
            if element[1] - 1 >= 0 and (cpy[element[0]][element[1] - 1] == '0' or cpy[element[0]][element[1] - 1] == 'P'):
                if cpy[element[0]][element[1] - 1] == 'P':
                    return cpy
                cpy[element[0]][element[1] - 1] = str(int(tt) + 1)
                arr.append([element[0], element[1] - 1])
            for point in arr:
                if cpy[point[0]][point[1]] == ('F' or 'P'):
                    arr.pop(arr.index(point) - 1)
                if cpy[point[0]][point[1]] == 'P':
                    return cpy

    return cpy

# Print
def display(tab, c1, c2):
    for i in range (len(tab)):
        for j in range (len(tab[i])):
            if (tab[i][j] == '0'):
                print (c2, end='')
            elif (tab[i][j] == c1 or tab[i][j] == 'F' or tab[i][j] == 'P'):
                print (tab[i][j], end='')
            else:
                print (int(tab[i][j]) % 10, end='')
        print ()

# Find All
def find_all(fileString, char):
    arr = []
    for i in range(len(fileString)):
        for j in range(len(fileString)):
            if fileString[i][j] == char:
                arr.append([i, j])
    return arr

# Copy Tab
def copytab(tab):
    copy = [[0] * len(tab[0]) for i in range(len(tab))]
    for line in range (len(tab)):
        for row in range (len(tab[0])):
            copy[line][row] = tab[line][row]
    return copy

# Array of Char to String
def convert(s):      
    new = ""
    for x in s:
        new += x 
    return new

# Main
if __name__ == '__main__':
    av = sys.argv
    ac = len(av)

    if ac == 2 and av[1] == "-h":
        usage()
    if ac == 1:
        print ("No Arguments")
        sys.exit(84)
    if ac > 4:
        print ("Too Many Arguments")
        sys.exit(84)

    if os.path.isfile(av[1]) == 0:
        print ("File does not exist")
        sys.exit(84)
    if (os.stat(av[1]).st_size) == 0:
        print ("File is empty")
        sys.exit(84)

    file = open(av[1], "rt")
    fileString = file.readlines()
    for i in range (len(fileString)):
        fileString[i] = fileString[i].replace("\n", '')

    sq = '0'
    wl = '1'

    if (ac == 3):
        if (len(av[2]) == 1):
            sq = av[2]
        else:
            print ('c1 and c2 must be 1 character')
            sys.exit(84)
    if (ac == 4):
        if (len(av[2]) == 1):
            sq = av[2]
        else:
            print ('c1 and c2 must be 1 character')
            sys.exit(84)
        if (len(av[3]) == 1):
            wl = av[3]
        else:
            print ('c1 and c2 must be 1 character')
            sys.exit(84)

    checks(fileString)
    pacman(fileString, sq, wl)