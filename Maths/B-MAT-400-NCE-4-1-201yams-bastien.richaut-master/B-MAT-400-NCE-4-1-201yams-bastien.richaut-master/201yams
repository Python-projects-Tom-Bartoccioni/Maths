#!/usr/bin/env python3

import math
import sys

# -h
def usage():
    print("USAGE")
    print("   ./201yams d1 d2 d3 d4 d5 c\n")
    print("DESCRIPTION")
    print("    d1      value of the first die (0 if not thrown)")
    print("    d2      value of the second die (0 if not thrown)")
    print("    d3      value of the third die (0 if not thrown)")
    print("    d4      value of the fourth die (0 if not thrown)")
    print("    d5      value of the fifth die (0 if not thrown)")
    print("    c       expected combination")
    sys.exit(0)

# Gestion d'erreur pour tous sauf le full
def check_comb(str):
    z = str.split('_')
    
    try:
        nb = int(z[1])
    except ValueError:
        print("Combination must be 'comb_A'")
        sys.exit(84)
    
    if (nb < 1 or nb > 6):
        print("The number needs to be positive and inferior or equal to 6")
        sys.exit(84)

    return nb

# Gestion d'erreur pour le full
def check_full(str):
    z = str.split('_')
    
    try:
        nb1 = int(z[1])
        nb2 = int(z[2])
    except ValueError:
        print("Combination must be 'full_A_B'")
        sys.exit(84)

    if (nb1 < 1 or nb1 > 6 or nb2 < 1 or nb2 > 6):
        print("Numbers needs to be positive and inferior or equal to 6")
        sys.exit(84)

    return [nb1, nb2]

# Nombre de combinaisons de n objets pris k a k
def combin(n, k):
    if k > n//2:
        k = n-k
    x = 1
    y = 1
    i = n-k+1
    while i <= n:
        x = (x*i)//y
        y += 1
        i += 1
    return x

# Probabilité d'avoir k réussite(s) dans n évènements indépendants, chaque évènement ayant une probabilité p% de réussite
def binom(k,n,p):
    x = combin(n, k) * math.pow(p, k) * math.pow(1 - p, n - k)
    return x

def pair(a, b, c, d, e, str):
    nb = check_comb(str)
    comb = "pair"
    tab = sorted([a, b, c, d, e])

    rel = 5
    for i in tab:
        if i == nb:
            rel = rel - 1

    if (rel <= 3):
        print(f"Chances to get a {nb:.0f} {comb}: 100.00%")
    else:
        bi = 0
        for x in range (0, rel - 3):
            bi += binom(x, rel, 1/6)
        res =  (1 - bi) * 100
        print(f"Chances to get a {nb:.0f} {comb}: {res:.2f}%")


def three(a, b, c, d, e, str):
    nb = check_comb(str)
    comb = "three-of-a-kind"
    tab = sorted([a, b, c, d, e])

    rel = 5
    for i in tab:
        if i == nb:
            rel = rel - 1

    if (rel <= 2):
        print(f"Chances to get a {nb:.0f} {comb}: 100.00%")
    else:
        bi = 0
        for x in range (0, rel - 2):
            bi += binom(x, rel, 1/6)
        res =  (1 - bi) * 100
        print(f"Chances to get a {nb:.0f} {comb}: {res:.2f}%")

def four(a, b, c, d, e, str):
    nb = check_comb(str)
    comb = "four-of-a-kind"
    tab = sorted([a, b, c, d, e])

    rel = 5
    for i in tab:
        if i == nb:
            rel = rel - 1

    if (rel <= 1):
        print(f"Chances to get a {nb:.0f} {comb}: 100.00%")
    else:
        bi = 0
        for x in range (0, rel - 1):
            bi += binom(x, rel, 1/6)
        res =  (1 - bi) * 100
        print(f"Chances to get a {nb:.0f} {comb}: {res:.2f}%")

def yams(a, b, c, d, e, str):
    nb = check_comb(str)
    comb = "yams"
    tab = sorted([a, b, c, d, e])

    rel = 5
    for i in tab:
        if i == nb:
            rel = rel - 1

    if (rel == 0):
        print(f"Chances to get a {nb:.0f} {comb}: 100.00%")
    else:
        bi = 0
        for x in range (0, rel):
            bi += binom(x, rel, 1/6)
        res =  (1 - bi) * 100
        print(f"Chances to get a {nb:.0f} {comb}: {res:.2f}%")

def full(a, b, c, d, e, str):
    tab = check_full(str)
    str.split('_')
    comb = "full"
    nb1 = tab[0]
    nb2 = tab[1]

    if (nb1 == nb2):
        print("The two variables of a full cannot be the same")
        sys.exit(84)

    tab = sorted([a, b, c, d, e])

    rel = [5, 5, 5]
    for i in tab:
        if i == nb1:
            rel[0] = rel[0] - 1
    for i in tab:
        if i == nb2:
            rel[1] = rel[1] - 1
    for i in tab:
        if i == nb1 or i == nb2:
            rel[2] = rel[2] - 1


    if (rel[0] == 2 and rel[1] == 3):
        print(f"Chances to get a {nb1:.0f}", comb, f"of {nb2:.0f}: 100.00%")
    elif (rel[0] == 3 and rel[1] == 2) or rel[2] == 1:
        print(f"Chances to get a {nb1:.0f}", comb, f"of {nb2:.0f}: 16.67%")
    elif rel[2] == 5:
        print(f"Chances to get a {nb1:.0f}", comb, f"of {nb2:.0f}: 0.13%")
    else:
        bi = binom(5 - rel[0], rel[2], 1/6) +  binom(5 - rel[1], rel[2], 1/6)
        res =  (1 - bi) * 100
        print(f"Chances to get a {nb1:.0f}", comb, f"of {nb2:.0f}: {res:.2f}%")

    # print(rel[0], rel[1], rel[2], comb, nb1, nb2, binom(5 - rel[0], rel[2], 1/6) + binom(5 - rel[1], rel[2], 1/6))

def straight(a, b, c, d, e, str):
    nb = check_comb(str)
    tab = sorted([a, b, c, d, e])

    if (nb <= 4):
        print("Straight must me equal to 5 or 6")
        sys.exit(84)

    if ((tab == [1, 2, 3, 4, 5] and nb == 5) or (tab == [2, 3, 4, 5, 6] and nb == 6)):
        print(f"Chances to get a {nb:.0f} straight: 100.00%")
    else:
        print(f"Chances to get a {nb:.0f} straight: 16.67%")

# Gestion d'erreur pour les arguments
def check_args(a, b, c, d, e, str):
    if str.find("pair_") == 0:
        pair(a, b, c, d, e, str)
    elif str.find("three_") == 0:
        three(a, b, c, d, e, str)
    elif str.find("four_") == 0:
        four(a, b, c, d, e, str)
    elif str.find("full_") == 0:
        full(a, b, c, d, e, str)
    elif str.find("straight_") == 0:
        straight(a, b, c, d, e, str)
    elif str.find("yams_") == 0:
        yams(a, b, c, d, e, str)
    else:
        print("Your combination doesn't exist")
        sys.exit(84)

if __name__ == '__main__':
    av = sys.argv
    ac = len(av)
    if (ac < 7):
        print("Not enough arguments")
        sys.exit(84)
    if av[1] == "-h" and ac == 2:
        usage()
    if (ac > 7):
        print("Too many arguments")
        sys.exit(84)

    for i in range (2,6):
        try:
            if (int(av[i]) < 0 or int(av[i]) > 6):
                print("All dice number has to be a positive number inferior or equal to 6")
                sys.exit(84)
        except ValueError:
            print("All numbers needs to be NUMBERS pls :)")
            sys.exit(84)

    a = int(av[1])
    b = int(av[2])
    c = int(av[3])
    d = int(av[4])
    e = int(av[5])
    str = av[6]
    check_args(a, b, c, d, e, str)
