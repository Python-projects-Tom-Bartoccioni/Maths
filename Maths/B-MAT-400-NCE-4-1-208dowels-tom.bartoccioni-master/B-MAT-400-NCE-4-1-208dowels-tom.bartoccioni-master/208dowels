#!/usr/bin/env python3

import math
import sys

distribution_table = [[0.00, 0.02, 0.06, 0.15, 0.27, 0.45, 0.71, 1.07, 1.64, 2.71, 3.84, 5.41, 6.63],
[0.02, 0.21, 0.45, 0.71, 1.02, 1.39, 1.83, 2.41, 3.22, 4.61, 5.99, 7.82, 9.21],
[0.11, 0.58, 1.01, 1.42, 1.87, 2.37, 2.95, 3.66, 4.64, 6.25, 7.81, 9.84, 11.34],
[0.30, 1.06, 1.65, 2.19, 2.75, 3.36, 4.04, 4.88, 5.99, 7.78, 9.49, 9.84, 11.34],
[0.55, 1.61, 2.34, 3.00, 3.66, 4.35, 5.13, 6.06, 7.29, 9.24, 11.07, 11.67, 13.28],
[0.7, 2.20, 3.07, 3.83, 4.57, 5.35, 6.21, 7.23, 8.56, 10.64, 12.59, 15.03, 16.81],
[1.24, 2.83, 3.82, 4.67, 5.49, 6.35, 7.28, 8.38, 9.80, 12.02, 14.07, 16.62, 18.48],
[1.65, 3.49, 4.59, 5.53, 6.42, 7.34, 8.35, 9.52, 11.03, 13.36, 15.51, 18.17, 20.09],
[2.09, 4.17, 5.38, 6.39, 7.63, 8.34, 9.41, 10.66, 12.24, 14.68, 16.92, 19.68, 21.67],
[2.56, 4.87, 6.18, 7.27, 8.30, 9.34, 10.47, 11.78, 13.44, 15.99, 18.31, 21.16, 23.21]]

# -h
def usage():
    print("USAGE")
    print("   ./208dowels O0 O1 O2 O3 O4 O5 O6 O7 O8")
    print("DESCRIPTION")
    print("    Oi\tsize of th eobserved class")
    sys.exit(0)

# Nombre de combinaisons de n objets pris k
def combin(n, k):
    if k > n // 2:
        k = n - k
    x = 1
    y = 1
    i = n - k + 1
    while i <= n:
        x = (x * i) // y
        y += 1
        i += 1
    return x

# Probabilité d'avoir k réussite(s) dans n évènements indépendants, chaque évènement ayant une probabilité p% de réussite
def binom(k,n,p):
    x = combin(n, k) * math.pow(p, k) * math.pow(1 - p, n - k)
    return x

def binomFrep(n, p, a, b):
    total = 0
    for x in range (a, b):
        total += binom(x,n,p)
    return total

# Print tabs
def print_tab(start, tab, end):
    print (start + "\t|", end="")
    for x in range (0, len(tab)):
        print (f" {tab[x]}\t|", end="")
    print (end)


# Change strings to 'a-b' or 'c+'
def change_tab(tab):
    for x in range (0, len(tab)):
        if (len(tab[x]) != 1):
            tab[x] = tab[x][0] + "-" + tab[x][len(tab[x]) - 1]
    tab[len(tab) - 1] = tab[len(tab) - 1][0] + '+'
    return tab

# Create Tx Tab
def binom_tab(xTab, p):
    total = 0
    txTab = []
    for x in range (0, len(xTab)):
        if (len(xTab[x]) == 1):
            total += binom(int(xTab[x]), 100, p)
            txTab.append(round(total * 100, 1))
            total = 0
        elif (len(xTab[x]) == 2):
            total += 1 - binomFrep(100, p, 0, int(xTab[x][0]))
            txTab.append(round(total * 100, 1))
            total = 0
        elif (len(xTab[x]) == 3):
            total += binomFrep(100, p, int(xTab[x][0]), int(xTab[x][2]) + 1)
            txTab.append(round(total * 100, 1))
            total = 0
    return (txTab)

# get Probability p
def get_p(values):
    total = 0
    for x in range (0, len(values)):
        total += x * values[x]
    return (total / 10000)

# get Chi X²
def get_chi(xTab, oxTab, p):
    total = 0
    chi = 0
    for x in range (0, len(xTab)):
        if (len(xTab[x]) == 1):
            total += binom(int(xTab[x]), 100, p)
            chi += math.pow(oxTab[x] - (total * 100), 2) / (total * 100)
            total = 0
        elif (len(xTab[x]) == 2):
            total += 1 - binomFrep(100, p, 0, int(xTab[x][0]))
            chi += math.pow(oxTab[x] - (total * 100), 2) / (total * 100)
            total = 0
        elif (len(xTab[x]) == 3):
            total += binomFrep(100, p, int(xTab[x][0]), int(xTab[x][2]) + 1)
            chi += math.pow(oxTab[x] - (total * 100), 2) / (total * 100)
            total = 0
    return (chi)

def get_fit(chi, freedom):
    tab = distribution_table[freedom - 1]
    if (chi < tab[0]):
        return ("P > 99%")
    elif (chi > tab[0] and chi < tab[1]):
        return ("90% < P < 99%")
    elif (chi > tab[1] and chi < tab[2]):
        return ("80% < P < 90%")
    elif (chi > tab[2] and chi < tab[3]):
        return ("70% < P < 80%")
    elif (chi > tab[3] and chi < tab[4]):
        return ("60% < P < 70%")
    elif (chi > tab[4] and chi < tab[5]):
        return ("50% < P < 60%")
    elif (chi > tab[5] and chi < tab[6]):
        return ("40% < P < 50%")
    elif (chi > tab[6] and chi < tab[7]):
        return ("30% < P < 40%")
    elif (chi > tab[7] and chi < tab[8]):
        return ("20% < P < 30%")
    elif (chi > tab[8] and chi < tab[9]):
        return ("10% < P < 20%")
    elif (chi > tab[9] and chi < tab[10]):
        return ("5% < P < 10%")
    elif (chi > tab[10] and chi < tab[11]):
        return ("2% < P < 5%")
    elif (chi > tab[11] and chi < tab[12]):
        return ("1% < P < 2%")
    elif (chi > tab[12]):
        return ("P < 1%")

# Create and Print Tab
def create_tab(values):
    p = get_p(values)
    x = len(values) - 1
    tmp = 0
    chartmp = ""
    xTab = []
    oxTab = []

    while x >= 0:
        if values[x] >= 10:
            xTab.insert(0, str(x))
            oxTab.insert(0, values[x])
            x -= 1
        else:
            while (tmp < 10 and x >= 0):
                tmp += values[x]
                chartmp = str(x) + chartmp
                x -= 1
            xTab.insert(0, chartmp)
            oxTab.insert(0, tmp)
            tmp = 0
            chartmp = ""

    # If 1st element of array isn't > 10
    if (oxTab[0] < 10):
        xTab[1] = xTab[0] + xTab[1]
        xTab.pop(0)
        oxTab[1] += oxTab[0]
        oxTab.pop(0)

    xTab = change_tab(xTab)
    txTab = binom_tab(xTab, p)
    chi = get_chi(xTab, oxTab, p)
    freedom = len(xTab) - 2
    fit = get_fit(chi, freedom)

    print_tab("  x", xTab, " Total")
    print_tab(" Ox", oxTab, " 100")
    print_tab(" Tx", txTab, " 100")

    print (f"Distribution:\t\tB(100, {p:.4f})")
    print (f"Chi-squared:\t\t{chi:.3f}")
    print (f"Degrees of freedom:\t{freedom}")
    print ("Fit validity:\t\t" + fit)

# Main
if __name__ == '__main__':
    av = sys.argv
    ac = len(av)

    if ac == 2 and av[1] == "-h":
        usage()
    if (ac < 10):
        print("Not enough arguments")
        sys.exit(84)
    if (ac > 10):
        print("Too many arguments")
        sys.exit(84)

    values = []

    try:
        for x in range (1, ac):
            values.append(int(av[x]))
            if (int(av[x]) < 0):
                print ("Arguments must be positive integers")
                sys.exit (84)
    except ValueError:
        print ("Arguments must be integers")
        sys.exit(84)

    if sum(values) != 100:
        print ("Sum of all values must be equal to 100")
        sys.exit(84)

    create_tab(values)